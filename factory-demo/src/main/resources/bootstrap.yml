server:
  port: 0 #${random.int[10000,19999]}

spring:
  application:
    name: demo-service
  output:
    ansi:
      enabled: always
  cloud:
    config:
      #enabled: true #标记说远程配置启用,默认为true
      discovery:
        enabled: true
        service-id: config-service
      fail-fast: true
#       username: root
#       password: booszy
      name: db-mysql,db-mongodb,redis,zipkin,actuator #config-rabbitmq,
      profile: ${spring.profiles.active} 
    consul:
      host: 127.0.0.1  #consul节点IP
      port: 8500       #consul节点端口      
      discovery:
        #prefer-ip-address: true #这个可以设置为true
        #ip-address: xxx
        #字符串不能为空,首字符必须为字母,尾字符必须为字母或数字,所有非字母数字的字符统一转换成'-'连接符,同时多个连续连接符转换成一个'-'. 
        #instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.cloud.client.hostname}:${random.int} #实例ID
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.cloud.client.hostname}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}        
        #health-check-path: /actuator/health #健康检查,默认配置，可以注释掉
        #health-check-interval: 10s #默认配置10s，可以注释掉
        #tags: management.context-path=/foo, health.path=/ping #, user.name=user, user.password=password
    bus:
      refresh:        enabled: true   
#  security:
#    user:
#      name: 'admin'
#      password: 'admin'
  profiles:
    active: dev
#  redis:
#    host: 172.0.0.1
#    password: 123456
#    port: 6379
#  jpa:
#    database-platform: org.hibernate.dialect.MySQLDialect
#    show-sql: true
#    hibernate:
#      ddl-auto: update
#  datasource:
#    druid:
#      url: jdbc:mysql://127.0.0.1:3306/test
#      username: root
#      password: booszy 

#配置查看factory-admin里application.yml的配置说明
#logging:
#  config: classpath:logback-application.xml

#debug: true #控制台输出debug
 
logging:
  #config: classpath=logback-spring.xml
  path: D:\stsworkspace2\factory\data\logs
  file: ${spring.application.name}
  level:
    ROOT: DEBUG
#除了查看 metric 端点外， Spring Boot Actuator 还提供了停止应用程序的端点。然而，与其他端点不同的是，缺省情况下，此端点是不可用的。我们必须把 management.endpoint.shutdown.enabled 设为 true 。在那之后，我们就可以通过发送一个 POST 请求到 /actuator/shutdown 端点来停止应用程序了
management:
  endpoint:
    shutdown:
      enabled: true