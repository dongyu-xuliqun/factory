server:
  port: 80

#之所以要用bootstrap.yml，是因为启动SpringBoot项目时，会优先读取bootstrap.yml里的配置，然后才会读取application.yml.如果不通过bootstrap.yml里的配置，先从配置中心拉下相应的配置文件，就会报错
spring:
  application:
    name: gateway-service
  cloud:
    config:
      discovery:
        enabled: true
        service-id: config-service
      fail-fast: true
#       username: root
#       password: booszy
      name: db-mysql,db-mongodb,config-rabbitmq,routes,redis,zipkin,actuator
      profile: ${spring.profiles.active} 
    consul:
      host: 10.0.50.127  #consul节点IP
      port: 8500       #consul节点端口      
      discovery:
        prefer-ip-address: true #这个可以设置为true
        #ip-address: xxx
        #字符串不能为空,首字符必须为字母,尾字符必须为字母或数字,所有非字母数字的字符统一转换成'-'连接符,同时多个连续连接符转换成一个'-'. 
        #instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.cloud.client.hostname}:${random.int} #实例ID
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.cloud.client.hostname}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}        
        #health-check-path: /actuator/health #健康检查,默认配置，可以注释掉
        #health-check-interval: 10s #默认配置10s，可以注释掉
        #tags: management.context-path=/foo, health.path=/ping #, user.name=user, user.password=password
       
    #集成eureka时开启    gateway:      discovery:        locator:          enabled: true
      default-filters:
      routes:
      - id: oauth-service
        uri: lb://auth-service
        predicates:
        - Path=/auth/**
        filters:                         
        - StripPrefix=1
      - id: user-service
        uri: lb://user-service
        predicates:
        - Path=/user/**
        filters:                         
        - StripPrefix=1      
                     #注释参考下面user-service的配置
      - id: consumer-service
        uri: lb://consumer-service
        predicates:
        - Path=/consumer/**
        filters:                         
        - StripPrefix=1
        - name: Hystrix
          args:
            name: authHystrixCommand
            fallbackUri: forward:/hystrixTimeout    
        - name: Retry
          args:
            retries: 3
            status : 404
            statusSeries: 500
            method: GET                 
        #- PrefixPath=/consumer
        # hystrix 信号量隔离，3秒后自动超时        
      #id唯一标识，（可自定义）#      - id: user-service
#                            #动态路由
#        # lb代表从注册中心获取服务
#        #lb协议，是网关的特有协议，自动支持负载均衡
#        uri: lb://user-service
#                           #路由转发规则
#        predicates:
#                              # 带前缀
#        - Path=/user/{segment}
#                            #过滤器
#        filters:
#        - SetPath=/{segment}
#        - StripPrefix=1
#      - id: publish-service
#        uri: lb://publish
#        predicates:
#        - Path=/publish/**
#        filters:
#                            #作用： 去掉部分URL路径
#                            #若无StripPrefix过滤器时，gateway 发送请求到后台服务spring-cloud-producer的url就是http://spring-cloud-producer/producerInEureka/hello
#                            #若有StripPrefix过滤器时，gateway会根据StripPrefix=1所配的值（这里是1）去掉URL路径中的部分前缀（这里去掉一个前缀，即去掉producerInEureka）                           
#                            #发送请求到后台服务spring-cloud-producer的url变成http://spring-cloud-producer/hello
#        - StripPrefix=1
#                             #作用：它的作用和StripPrefix正相反是在URL路径前面添加一部分的前缀
#                            #这将会把/mypath添加到路由prefixpath_route匹配到的所有请求的路径的前面
#                           #所以对/hello的请求将会被发送到/mypath/hello
#        - PrefixPath=/myPath      
  profiles:
    active: dev
              #        registration:  #security:
#  oauth2:
#    authorization:
#      jwt:
#        key-value:     
management:
  endpoint:
    health:
      show-details: always
hystrix:  
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 3000  
  # 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
  # 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
  # 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
  shareSecurityContext: true
  
logging:
  #config: classpath=logback-spring.xml
  path: D:\stsworkspace2\factory\data\logs
  file: ${spring.application.name}
  level:
    ROOT: DEBUG